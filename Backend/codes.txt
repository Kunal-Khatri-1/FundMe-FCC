//
yarn add --save --dev @nomiclabs/hardhat-solhint

// in remix it imported chainlink directly from NPM and/or GitHub
// but in local code we have download npm package
yarn add --dev @chainlink/contracts


// hardhat deploy package
// keeping track of all the deployments can be tricky
// not saving any deploymnets to any file
// work tests and deploy to work hand in hand
// this gives a deploy task
// manually create a new folder deploy
yarn add haradhat --dev hardhat-deploy

// need to install hardhat-deploy-ethers
// we are taking the nomiclabs ethers and then "overriding" it with hardhat-deploy-ethers
yarn add --dev @nomiclabs/hardhat-ethers@npm:hardhat-deploy-ethers ethers

// all the scripts in the deploy foleder will run
// number them so that they run in order
// use the same/previous command to deploy and compile
yarn hardhat deploy

// deploy only a particular contracts
yarn hardhat deploy --tags <tagname>

// in the test folder
cd test

// unit tests are done locally
// - local hardhat
// - forked hardhat
mkdir unit

// make directories
// staging tests are done on a testnet
mkdir staging

yarn hardhat test

yarn hardhat coverage

// use console.log() inside of soldidity for debugging
// import this into the solidity file
import "hardhat/console.sol"

// run the hardhat node and fund the contract
yarn hardhat run scripts/fund.js --network localhost

// run the hardhat node and withdraw funds from the contract
yarn hardhat run scripts/withdraw.js --network localhost

// condense all the long tests into a yarn script
 "scripts": {
    "test": "yarn hardhat test",
    "test:staging": "yarn hardhat test --network goerli",
    "lint": "yarn solhint 'contracts/*.sol'",
    "lint:fix": "yarn solhint 'contracts/*.sol' --fix",
    // . => everything
    "format": "yarn prettier --write ."
  }
// now yarn hardhat test => yarn test

// creates solhint config file
yarn solhint --init


// when building Dapps, you usually have 2 repos
// 1. one for the smart contracts
// 2. one for the front end / website

// full stack = smart contract (backend) + (HTML + CSS + JS)(frontend)